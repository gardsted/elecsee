#!/bin/bash
declare -A _ARGSPEC=(
    # only 3 letter subcommands - onn :-) - see hlp and doc
    [new]="CONTAINERS[]" # lxc-create / lxc-copy CONTAINERS[]
    [net]="CONTAINERS[]" # ping until network is up in all CONTAINERS[]
    [onn]="CONTAINERS[]" # lxc-start CONTAINERS[] - uses [net] to ensure they are up - returns/errs after max 10 secs
    [off]="CONTAINERS[]" # lxc stop CONTAINERS[]
    [del]="CONTAINERS[]" # lxc-destroy etc CONTAINERS[]
    [lst]="" # lxc-ls --fancy -Fname,ipv4
    [aut]="CONTAINERS[]" # make containers autostart via systemd
    [tua]="CONTAINERS[]" # stop containers from autostarting
    [exp]="PROTO INTERNAL EXTERNAL CONTAINER" # expose PROTOcol from container port (INTERNAL) on hosts (EXTERNAL) (udp/tcp=socat) (http/https=nginx)
    [pxe]="PROTO INTERNAL EXTERNAL CONTAINER" # remove exposure
    [hst]="" # modify hostfile so it also contains running containers
    [hlp]="" # write documentation to stdout - short help version
    [doc]="" # write documentation to stdout - long version
    [cmd]="CONTAINER ARGS[]" # execute a command in a container script
    [zro]="" # initializes,  necessary, but does a lot - see the documentation
    [ssh]="CONTAINERS[]" # adds ssh users and certificates to container
)


[ -z "${SOURCE_ONLY}" ] && (
    # running as subshell - this wil not be sourced when .
    ([ "$debug" = "true" ] || [[ $- == *x* ]]) && debug=true || debug=false
    [ "${debug}" = "true" ] && logfile=/dev/stdout || logfile=/dev/null
    export CMD=${1} ; shift
    export CMD=${CMD:-hlp}
    export DOWNLOAD_KEYSERVER="pgp.mit.edu"
    export LINUX=${LINUX:-"--dist=ubuntu --release=bionic --arch=amd64"}
    export ELECSEE=$(readlink -f $0)
    export ELECSEE_COMMANDS=${ELECSEE_COMMANDS:-"$(dirname ${ELECSEE})/commands"}
    export ELECSEE_DATA=${ELECSEE_DATA:-"$(dirname ${ELECSEE})/data"}
    export ELECSEE_SCRIPTS=${ELECSEE_SCRIPTS:-"$(dirname ${ELECSEE})/scripts"}
    export USS=${USS:-clint}
    export USO=${USO:-donald}
    export ME=${ME:-"$(whoami)"}
    [ "${ME}" = "root" -a -n "${SUDO_USER}" ] && export ME=${SUDO_USER}

    export logfile debug

    export ARGSPEC=${_ARGSPEC[$CMD]}
    export ARGLEN=$#
    export ARGMIN=$(echo "${ARGSPEC}" | wc -w)

    declare -A _ERRSPEC=(
        # error explanations
        [0]=''
        [101]="too few arguments, call like $ELECSEE $CMD $ARGSPEC"
        [102]="excess arguments, call like $ELECSEE $CMD $ARGSPEC"
        [103]="do not run this as root - use sudo instead"
    )
    export _ERRSPEC
    function errspec() {
       echo ${_ERRSPEC[$ERRSPEC]} >&2
       return $ERRSPEC
    }

    ( 
    [[ $ARGLEN -ge ${ARGMIN} ]] || exit 101
    for a in ${ARGSPEC} THEREST
    do 
        if [ "${a}" = "${a%\[\]}" ] 
        then 
            export "$a"=$1
            shift
        else
            export "${a%\[\]}"="$*" 
            shift $#
            break
        fi
    done
    [ "${THEREST}" ] && exit 102
    [ "${ME}" = "root" ] && exit 103
    ${ELECSEE_COMMANDS}/elecsee-${CMD}
    ) || exit $($(ERRSPEC=$? errspec))
)
