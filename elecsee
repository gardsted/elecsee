#!/bin/bash
declare -A _ARGSPEC=(
    # only 3 letter subcommands - onn :-) - see hlp and doc
    [new]="CONTAINERS[]" # lxc-create / lxc-copy CONTAINERS[]
    [net]="CONTAINERS[]" # ping until network is up in all CONTAINERS[]
    [onn]="CONTAINERS[]" # lxc-start CONTAINERS[] - uses [net] to ensure they are up - returns/errs after max 10 secs
    [off]="CONTAINERS[]" # lxc stop CONTAINERS[]
    [del]="CONTAINERS[]" # lxc-destroy etc CONTAINERS[]
    [lst]="" # lxc-ls --fancy -Fname,ipv4
    [aut]="CONTAINERS[]" # make containers autostart via systemd
    [tua]="CONTAINERS[]" # stop containers from autostarting
    [exp]="PROTO INTERNAL EXTERNAL CONTAINER" # expose PROTOcol from container port (INTERNAL) on hosts (EXTERNAL) (udp/tcp=socat) (http/https=nginx)
    [pxe]="PROTO INTERNAL EXTERNAL CONTAINER" # remove exposure
    [hst]="" # modify hostfile so it also contains running containers
    [hlp]="" # write documentation to stdout - short help version
    [doc]="" #'write documentation to stdout - long version')
    [cmd]="CONTAINER ARGS[]" #'write documentation to stdout - long version')
)


[ -z "${SOURCE_ONLY}" ] && (
    # running as subshell - this wil not be sourced when .
    ([ "$debug" = "true" ] || [[ $- == *x* ]]) && debug=true || debug=false
    [ "${debug}" = "true" ] && logfile=/dev/stdout || logfile=/dev/null
    export CMD=${1} ; shift
    export CMD=${CMD:-hlp}
    export LINUX="--dist=ubuntu --release=xenial --arch=amd64"
    export RUNSOCKET=/var/lib/elecsee/run-socket
    export ELECSEE=$(readlink -f $0)
    export ELECSEE_COMMANDS=$(dirname ${ELECSEE})/commands
    export ELECSEE_SCRIPTS=$(dirname ${ELECSEE})/scripts
    export USS=clint USO=donald ME=$SUDO_USER
    export logfile debug

    export ARGSPEC=${_ARGSPEC[$CMD]}
    export ARGLEN=$#
    export ARGMIN=$(echo "${ARGSPEC}" | wc -w)

    declare -A _ERRSPEC=(
        # error explanations
        [0]=''
        [101]="too few arguments, call like $ELECSEE $CMD $ARGSPEC"
        [102]="excess arguments, call like $ELECSEE $CMD $ARGSPEC"
    )
    export _ERRSPEC

    for a in ${ARGSPEC%\[\]} THEREST
    do 
        export "$a"=$1
        shift
    done
    

    ( [[ $ARGLEN -ge ${ARGMIN} ]] || exit 101
    if [ "${ARGSPEC}" = "${ARGSPEC%\[\]}" ]; then
        # fixed args
        [ -n "${THEREST}" ] && exit 102
        ${ELECSEE_COMMANDS}/elecsee-${CMD}
    else
        # varargs
        ${ELECSEE_COMMANDS}/elecsee-${CMD}
    fi ) || echo ${_ERRSPEC[$?]}
)
