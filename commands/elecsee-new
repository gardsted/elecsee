#!/bin/bash
[ "${debug}" = "true" ] && set -x

function hlp(){
( cat << EOF
new creates conteiner from a model, and if the model does not exist, it creates the model first - see 'doc' for more info
EOF
)
}

function doc(){
cat << EOF
new creates container from a model, and if the model does not exist, it creates the model first 
models are placed in the script directory and have to functions which are called from this script
'model' is called if a model does not exist
'instance' is called last and creates a container of the specified name

The following example shows the creation of a solr node

    sudo ./elecsee new solr-1
    building model
    add ssh, users (clint and donald) and public certificates to model
    add java 8 to model - this will take some time
    add solr-7.5.0 to model - this will take some time
    building solr-1

EOF
}

function new-model(){
    [ "${DEBUG}" = "true" ] && set -x
    export CONTAINER=${PREFIX}-model
    [ "$PRIVILEGED" = "true" ] && (
        lxc-destroy -f ${CONTAINER}
        lxc-create --name ${CONTAINER} -t download -- ${LINUX}
        lxc-start --name ${CONTAINER}
    ) || (
        sudo -u ${ME} lxc-destroy -f ${CONTAINER}
        sudo -u ${ME} lxc-create --name ${CONTAINER} -t download -- ${LINUX}
        sudo -u ${ME} lxc-start --name ${CONTAINER}
    )
    ${ELECSEE} net ${CONTAINER}
    ${ELECSEE} hst
    sleep 1
    ${ELECSEE} ssh ${CONTAINER}
    [ "$PRIVILEGED" = "true" ] && (
        export CONTEXT=model
        /bin/bash -e ${ELECSEE_SCRIPTS}/base
        /bin/bash -e ${ELECSEE_SCRIPTS}/${PREFIX}
    ) || (
        export CONTEXT=model
        env sudo -E -u ${ME} /bin/bash -e ${ELECSEE_SCRIPTS}/base
        env sudo -E -u ${ME} /bin/bash -e ${ELECSEE_SCRIPTS}/${PREFIX}
    )

}

function new-instance(){
    [ "${DEBUG}" = "true" ] && set -x
    [ "$PRIVILEGED" = "true" ] && (
        lxc-stop --name ${PREFIX}-model
        lxc-destroy -f --name ${CONTAINER}
        lxc-copy --name ${PREFIX}-model --newname ${CONTAINER}
        lxc-start --name ${CONTAINER}
        echo ${CONTAINER} | lxc-attach --name ${CONTAINER} /bin/sh -- -c '/bin/cat > /etc/hostname'
    ) || (
        sudo -u ${ME} lxc-stop --name ${PREFIX}-model
        sudo -u ${ME} lxc-destroy -f --name ${CONTAINER}
        sudo -u ${ME} lxc-copy --name ${PREFIX}-model --newname ${CONTAINER}
        sudo -u ${ME} lxc-start --name ${CONTAINER}
        echo ${CONTAINER} | sudo -u ${ME} lxc-attach --name ${CONTAINER} /bin/sh -- -c '/bin/cat > /etc/hostname'
    )
    ${ELECSEE} net ${CONTAINER}
    ${ELECSEE} hst
    [ "$PRIVILEGED" = "true" ] && (
        export CONTEXT=instance 
        /bin/bash -e ${ELECSEE_SCRIPTS}/base
        /bin/bash -e ${ELECSEE_SCRIPTS}/${PREFIX}
        lxc-stop --name ${CONTAINER}
        lxc-start --name ${CONTAINER}
    ) || (
        export CONTEXT=instance
        env sudo -E -u ${ME} /bin/bash -e ${ELECSEE_SCRIPTS}/base
        env sudo -E -u ${ME} /bin/bash -e ${ELECSEE_SCRIPTS}/${PREFIX}
        sudo -u ${ME} lxc-stop --name ${CONTAINER}
        sudo -u ${ME} lxc-start --name ${CONTAINER}
    )
}


function new(){
    [ "${DEBUG}" = "true" ] && set -x
    for CONTAINER in ${CONTAINERS}
    do
        export CONTEXT=
        export CONTAINER
        export SUFFIX=${CONTAINER##*-}
        export PREFIX=${CONTAINER%-${SUFFIX}}
        export CONTAINER_SCRIPT=${ELECSEE_SCRIPTS}/${PREFIX}
        # set PRIVILEGED/LINUX etc
        . ${ELECSEE_SCRIPTS}/${PREFIX}
        export PRIVILEGED=${PRIVILEGED:-false}
        ${ELECSEE} lst | grep '^'${PREFIX}-model' ' >> ${logfile} 2>&1 || (
            echo building model
            (new-model >> $logfile 2>&1)
        )
        echo building ${CONTAINER}
        (new-instance >> ${logfile} 2>&1)
    done
}

($CMD)
