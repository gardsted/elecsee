#!/bin/bash
[ "${debug}" = "true" ] && set -x

function hlp(){
( cat << EOF
exp exposes an UDP or TCP service from the container on the hosts interfaces using socat port forwarding
pxe reverses the action, removing the exposure
EOF
)
}

function doc(){
( cat << EOF
$(hlp)

running this command:

    sudo elecsee exp TCP 8983 80 solr-1

will produce the file **/etc/systemd/system/elecsee-exp-TCP-solr-1-8983-80.service** with the following contents and enable and start it

    [Unit]
    Description=elecsee expose TCP on solr-1:8983 on external 80

    [Service]
    Type=simple
    ExecStart=/usr/bin/socat TCP-LISTEN:80,fork,reuseaddr TCP:solr-1:8983

    [Install]
    WantedBy=multi-user.target

while running this command:

    sudo elecsee pxe TCP 8983 80 solr-1

will stop and disable the service and subsequently remove the file

forwarding is as You see currently done using only socat, but it probably should be extended to using both this (for accesing from host it self) and maybe iptables (for accessing from outside) there is an entry on superusers [here](https://superuser.com/questions/1322143/prerouting-to-lxc-container-with-iptables)
furthermore there is one here, that is way more interesting - on [containerops](http://containerops.org/2013/11/19/lxc-networking/) dissussing all kinds of container/networking related  It seems that it is possible to let the container access the physical interface. I wonder what happens when I go on vpn?

EOF
)
}

SERVICENAME=elecsee-exp-${PROTO}-${CONTAINER}-${INTERNAL}-${EXTERNAL}

function systemd-forwarder(){
(cat << EOF
[Unit]
Description=elecsee expose ${PROTO} on ${CONTAINER}:${INTERNAL} on external ${EXTERNAL}

[Service]
Type=simple
ExecStart=/usr/bin/socat ${PROTO}-LISTEN:${EXTERNAL},fork,reuseaddr ${PROTO}:${CONTAINER}:${INTERNAL}

[Install]
WantedBy=multi-user.target
EOF
) > /etc/systemd/system/${SERVICENAME}.service
    systemctl enable ${SERVICENAME}.service
    systemctl start ${SERVICENAME}.service
    systemctl status ${SERVICENAME}.service
    
}


function exp(){
(
    case ${PROTO} in
        (TCP|UDP) systemd-forwarder ;;  
    esac 
) >> ${logfile} 2>&1
}

function pxe(){
(
    systemctl stop ${SERVICENAME}.service
    systemctl disable ${SERVICENAME}.service
    systemctl status ${SERVICENAME}.service
    rm /etc/systemd/system/${SERVICENAME}.service
) >> ${logfile} 2>&1
}

${CMD}
