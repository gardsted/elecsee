#!/bin/bash SOLR=7.5.0
export LORA_PORT=8080  # consistent with default values
export MORA_PORT=5000  # consistent with frontend dev server
export GITLAB="git.magenta.dk"

function doc(){
cat << EOF
adds lora to model and sets up simple service
EOF
}

function gitsshconfig(){
(cat << EOF
Host ${GITLAB}
    Hostname ${GITLAB}
    IdentityFile ~/.ssh/gitlab_rsa
    IdentitiesOnly yes
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} /bin/sh -- -c "/bin/cat >> /home/clint/.ssh/config" 
ssh-keyscan ${GITLAB} | lxc-attach --name ${CONTAINER} /bin/sh -- -c "/bin/cat >> /home/clint/.ssh/known_hosts"
}

function autostart-lora(){
# man systemd.exec
(cat << EOF
[Unit]
Description=${USS}s lora.service

[Service]
User=$USS
Type=simple
Environment="MOX_USER_CONFIG_PATH=/home/clint/mox_user_config.toml"
ExecStart=/bin/sh -c 'exec /home/${USS}/mox/python-env/bin/python3 -m oio_rest run -h 0.0.0.0 -p ${LORA_PORT} >> /home/${USS}/lora.log 2>&1'

[Install]
WantedBy=multi-user.target
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} /bin/sh -- -c "/bin/cat >> /etc/systemd/system/lora.service" 
(cat << EOF
systemctl enable lora.service
systemctl start lora.service
systemctl status lora.service
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} >> ${logfile} 2>&1
}

function autostart-os2mo(){
# man systemd.exec
(cat << EOF
[Unit]
Description=${USS}s os2mo.service

[Service]
User=$USS
Type=simple
Environment="DB_STRUCTURE_EXTENSIONS=/home/clint/os2mo/backend/mora/db_extensions.json"
ExecStart=/bin/sh -c 'exec /home/${USS}/os2mo/backend/flask.sh run -h 0.0.0.0 -p ${MORA_PORT} >> /home/${USS}/os2mo.log 2>&1'

[Install]
WantedBy=multi-user.target
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} /bin/sh -- -c "/bin/cat >> /etc/systemd/system/os2mo.service" 
(cat << EOF
systemctl enable os2mo.service
systemctl start os2mo.service
systemctl status os2mo.service
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} >> ${logfile} 2>&1
}

function runner-script(){
(cat << EOF
[ -f ~/mox-installed ] || mox/install.sh > ~/mox-installed
export DB_STRUCTURE_EXTENSIONS=/home/clint/mox/oio_rest/oio_rest/db_extensions/mo-01.json
export MOX_USER_CONFIG_PATH=/home/clint/mox_user_config.toml

(cat << EOMOXUSERCONFIG
[db_extensions]
path = "\$DB_STRUCTURE_EXTENSIONS"
dummy_mode = true
[lora]
url = "http://mox:8080/"
[session.database]
host = "mox-db"
[configuration.database]
host = "mox-db"
[amqp]
enable = true
host = "msg_broker"
EOMOXUSERCONFIG
) > \${MOX_USER_CONFIG_PATH}

sudo systemctl stop lora 2>/dev/null # mine - forget about it
sudo systemctl restart postgresql

if [ "\$1" = "init" ]
then
    export MOX_USER_CONFIG_PATH=~/mox_user_config.toml
    source <(sed "s/\(^[A-Z_]*=\)/export \1/" os2mo/dev-environment/*.env)
    export DB_PORT=5432

    mox/python-env/bin/python -m oio_rest initdb

    # -- set up session and donfiguration database
    sudo -u postgres dropdb \$CONF_DB_NAME
    sudo -u postgres dropuser \$CONF_DB_USER
    sudo -u postgres dropdb \$SESSIONS_DB_NAME
    sudo -u postgres dropuser \$SESSIONS_DB_USER
    for DBSH in os2mo/docker/postgres-initdb.d/*; do
        cat \$DBSH
        sudo -E su -c \$DBSH postgres
    done

    os2mo/backend/flask.sh initdb

    # -- if supplied - load data into lora database
    if [ -n "\$2" ]
    then
        psql -Umox --host localhost mox <\$2
    fi
fi
sudo systemctl start lora 2>/dev/null # mine - forget about it
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} /bin/sh -- -c "/bin/cat >> /home/clint/runner.sh" 
(cat << EOF
chmod 755 /home/clint/runner.sh
chown clint:clint /home/clint/runner.sh
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} >> \${logfile} 2>&1
}


function model(){
echo add lora to model - this will take some time
(cat << EOF
[ "${debug}" = "true" ] && set -x
rm /etc/localtime
ln -s /usr/share/zoneinfo/Europe/Copenhagen /etc/localtime
apt-get -qq update
apt-get -qq upgrade
apt install -y git ssh git-flow curl jq build-essential libssl-dev libffi-dev python3-dev xmlsec1 libxmlsec1-dev pkg-config
sudo su -l -c 'ssh-keygen -b 2048 -t rsa -f ~/.ssh/gitlab_rsa' $USS
sudo su -l -c 'touch ~/.ssh/config' $USS
sudo su -l -c 'touch ~/.ssh/known_hosts' $USS
sudo su -l -c 'chmod 600 ~/.ssh/gitlab_rsa' $USS
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} >> ${logfile} 2>&1
(gitsshconfig)
}




function instance(){
(cat << EOF
[ "${debug}" = "true" ] && set -x
su -l -c 'git clone -b development git@${GITLAB}:rammearkitektur/lora mox'  $USS
su -l -c 'git clone -b development git@${GITLAB}:rammearkitektur/os2mo os2mo' $USS
su -l -c 'cd mox && git pull' $USS
su -l -c 'cd os2mo && git pull' $USS
#su -l -c 'DB_STRUCTURE_EXTENSIONS=/home/clint/os2mo/backend/mora/db_extensions.json /home/clint/mox/install.sh' $USS
apt-key add /home/$USS/os2mo/setup/nodesource/nodesource.gpg.key
cp /home/$USS/os2mo/setup/nodesource/nodesource-8.x.list /etc/apt/sources.list.d/nodesource-8.x.list
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
apt-get update --allow-unauthenticated 
apt-get install -y --allow-unauthenticated yarn nodejs jq libpq-dev
su -l -c 'cd os2mo/backend && python3 -m venv venv && ./venv/bin/pip install -r requirements.txt' $USS
su -l -c 'cd os2mo/backend && ./flask.sh build;' $USS
su -l -c 'jq '\''.LORA_URL="http://localhost:'${LORA_PORT}'/"'\'' /home/$USS/os2mo/setup/mora-example.json > /home/$USS/os2mo/setup/mora.json' $USS
EOF
) | sudo -u ${ME} lxc-attach --name ${CONTAINER} >> ${logfile} 2>&1
(autostart-lora)
(autostart-os2mo)
(runner-script)
}



$CONTEXT
